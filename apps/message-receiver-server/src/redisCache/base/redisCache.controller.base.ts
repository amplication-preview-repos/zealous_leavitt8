/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { RedisCacheService } from "../redisCache.service";
import { RedisCacheCreateInput } from "./RedisCacheCreateInput";
import { RedisCache } from "./RedisCache";
import { RedisCacheFindManyArgs } from "./RedisCacheFindManyArgs";
import { RedisCacheWhereUniqueInput } from "./RedisCacheWhereUniqueInput";
import { RedisCacheUpdateInput } from "./RedisCacheUpdateInput";

export class RedisCacheControllerBase {
  constructor(protected readonly service: RedisCacheService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: RedisCache })
  async createRedisCache(
    @common.Body() data: RedisCacheCreateInput
  ): Promise<RedisCache> {
    return await this.service.createRedisCache({
      data: data,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [RedisCache] })
  @ApiNestedQuery(RedisCacheFindManyArgs)
  async redisCaches(@common.Req() request: Request): Promise<RedisCache[]> {
    const args = plainToClass(RedisCacheFindManyArgs, request.query);
    return this.service.redisCaches({
      ...args,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,
        value: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: RedisCache })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async redisCache(
    @common.Param() params: RedisCacheWhereUniqueInput
  ): Promise<RedisCache | null> {
    const result = await this.service.redisCache({
      where: params,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,
        value: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: RedisCache })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateRedisCache(
    @common.Param() params: RedisCacheWhereUniqueInput,
    @common.Body() data: RedisCacheUpdateInput
  ): Promise<RedisCache | null> {
    try {
      return await this.service.updateRedisCache({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          key: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: RedisCache })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteRedisCache(
    @common.Param() params: RedisCacheWhereUniqueInput
  ): Promise<RedisCache | null> {
    try {
      return await this.service.deleteRedisCache({
        where: params,
        select: {
          createdAt: true,
          id: true,
          key: true,
          updatedAt: true,
          value: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
