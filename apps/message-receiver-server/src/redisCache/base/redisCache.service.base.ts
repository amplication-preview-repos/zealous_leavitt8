/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, RedisCache as PrismaRedisCache } from "@prisma/client";

export class RedisCacheServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.RedisCacheCountArgs, "select">
  ): Promise<number> {
    return this.prisma.redisCache.count(args);
  }

  async redisCaches(
    args: Prisma.RedisCacheFindManyArgs
  ): Promise<PrismaRedisCache[]> {
    return this.prisma.redisCache.findMany(args);
  }
  async redisCache(
    args: Prisma.RedisCacheFindUniqueArgs
  ): Promise<PrismaRedisCache | null> {
    return this.prisma.redisCache.findUnique(args);
  }
  async createRedisCache(
    args: Prisma.RedisCacheCreateArgs
  ): Promise<PrismaRedisCache> {
    return this.prisma.redisCache.create(args);
  }
  async updateRedisCache(
    args: Prisma.RedisCacheUpdateArgs
  ): Promise<PrismaRedisCache> {
    return this.prisma.redisCache.update(args);
  }
  async deleteRedisCache(
    args: Prisma.RedisCacheDeleteArgs
  ): Promise<PrismaRedisCache> {
    return this.prisma.redisCache.delete(args);
  }
}
