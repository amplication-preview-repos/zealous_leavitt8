/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { RedisCache } from "./RedisCache";
import { RedisCacheCountArgs } from "./RedisCacheCountArgs";
import { RedisCacheFindManyArgs } from "./RedisCacheFindManyArgs";
import { RedisCacheFindUniqueArgs } from "./RedisCacheFindUniqueArgs";
import { CreateRedisCacheArgs } from "./CreateRedisCacheArgs";
import { UpdateRedisCacheArgs } from "./UpdateRedisCacheArgs";
import { DeleteRedisCacheArgs } from "./DeleteRedisCacheArgs";
import { RedisCacheService } from "../redisCache.service";
@graphql.Resolver(() => RedisCache)
export class RedisCacheResolverBase {
  constructor(protected readonly service: RedisCacheService) {}

  async _redisCachesMeta(
    @graphql.Args() args: RedisCacheCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [RedisCache])
  async redisCaches(
    @graphql.Args() args: RedisCacheFindManyArgs
  ): Promise<RedisCache[]> {
    return this.service.redisCaches(args);
  }

  @graphql.Query(() => RedisCache, { nullable: true })
  async redisCache(
    @graphql.Args() args: RedisCacheFindUniqueArgs
  ): Promise<RedisCache | null> {
    const result = await this.service.redisCache(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => RedisCache)
  async createRedisCache(
    @graphql.Args() args: CreateRedisCacheArgs
  ): Promise<RedisCache> {
    return await this.service.createRedisCache({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => RedisCache)
  async updateRedisCache(
    @graphql.Args() args: UpdateRedisCacheArgs
  ): Promise<RedisCache | null> {
    try {
      return await this.service.updateRedisCache({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => RedisCache)
  async deleteRedisCache(
    @graphql.Args() args: DeleteRedisCacheArgs
  ): Promise<RedisCache | null> {
    try {
      return await this.service.deleteRedisCache(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
