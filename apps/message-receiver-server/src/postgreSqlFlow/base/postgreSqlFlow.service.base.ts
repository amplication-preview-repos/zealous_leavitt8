/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PostgreSqlFlow as PrismaPostgreSqlFlow } from "@prisma/client";

export class PostgreSqlFlowServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PostgreSqlFlowCountArgs, "select">
  ): Promise<number> {
    return this.prisma.postgreSqlFlow.count(args);
  }

  async postgreSqlFlows(
    args: Prisma.PostgreSqlFlowFindManyArgs
  ): Promise<PrismaPostgreSqlFlow[]> {
    return this.prisma.postgreSqlFlow.findMany(args);
  }
  async postgreSqlFlow(
    args: Prisma.PostgreSqlFlowFindUniqueArgs
  ): Promise<PrismaPostgreSqlFlow | null> {
    return this.prisma.postgreSqlFlow.findUnique(args);
  }
  async createPostgreSqlFlow(
    args: Prisma.PostgreSqlFlowCreateArgs
  ): Promise<PrismaPostgreSqlFlow> {
    return this.prisma.postgreSqlFlow.create(args);
  }
  async updatePostgreSqlFlow(
    args: Prisma.PostgreSqlFlowUpdateArgs
  ): Promise<PrismaPostgreSqlFlow> {
    return this.prisma.postgreSqlFlow.update(args);
  }
  async deletePostgreSqlFlow(
    args: Prisma.PostgreSqlFlowDeleteArgs
  ): Promise<PrismaPostgreSqlFlow> {
    return this.prisma.postgreSqlFlow.delete(args);
  }
}
