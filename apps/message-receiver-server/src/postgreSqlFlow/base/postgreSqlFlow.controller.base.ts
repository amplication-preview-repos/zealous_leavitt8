/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostgreSqlFlowService } from "../postgreSqlFlow.service";
import { PostgreSqlFlowCreateInput } from "./PostgreSqlFlowCreateInput";
import { PostgreSqlFlow } from "./PostgreSqlFlow";
import { PostgreSqlFlowFindManyArgs } from "./PostgreSqlFlowFindManyArgs";
import { PostgreSqlFlowWhereUniqueInput } from "./PostgreSqlFlowWhereUniqueInput";
import { PostgreSqlFlowUpdateInput } from "./PostgreSqlFlowUpdateInput";

export class PostgreSqlFlowControllerBase {
  constructor(protected readonly service: PostgreSqlFlowService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PostgreSqlFlow })
  async createPostgreSqlFlow(
    @common.Body() data: PostgreSqlFlowCreateInput
  ): Promise<PostgreSqlFlow> {
    return await this.service.createPostgreSqlFlow({
      data: data,
      select: {
        createdAt: true,
        flow: true,
        id: true,
        step: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PostgreSqlFlow] })
  @ApiNestedQuery(PostgreSqlFlowFindManyArgs)
  async postgreSqlFlows(
    @common.Req() request: Request
  ): Promise<PostgreSqlFlow[]> {
    const args = plainToClass(PostgreSqlFlowFindManyArgs, request.query);
    return this.service.postgreSqlFlows({
      ...args,
      select: {
        createdAt: true,
        flow: true,
        id: true,
        step: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PostgreSqlFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async postgreSqlFlow(
    @common.Param() params: PostgreSqlFlowWhereUniqueInput
  ): Promise<PostgreSqlFlow | null> {
    const result = await this.service.postgreSqlFlow({
      where: params,
      select: {
        createdAt: true,
        flow: true,
        id: true,
        step: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PostgreSqlFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePostgreSqlFlow(
    @common.Param() params: PostgreSqlFlowWhereUniqueInput,
    @common.Body() data: PostgreSqlFlowUpdateInput
  ): Promise<PostgreSqlFlow | null> {
    try {
      return await this.service.updatePostgreSqlFlow({
        where: params,
        data: data,
        select: {
          createdAt: true,
          flow: true,
          id: true,
          step: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PostgreSqlFlow })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePostgreSqlFlow(
    @common.Param() params: PostgreSqlFlowWhereUniqueInput
  ): Promise<PostgreSqlFlow | null> {
    try {
      return await this.service.deletePostgreSqlFlow({
        where: params,
        select: {
          createdAt: true,
          flow: true,
          id: true,
          step: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
