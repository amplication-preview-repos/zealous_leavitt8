/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PostgreSqlFlow } from "./PostgreSqlFlow";
import { PostgreSqlFlowCountArgs } from "./PostgreSqlFlowCountArgs";
import { PostgreSqlFlowFindManyArgs } from "./PostgreSqlFlowFindManyArgs";
import { PostgreSqlFlowFindUniqueArgs } from "./PostgreSqlFlowFindUniqueArgs";
import { CreatePostgreSqlFlowArgs } from "./CreatePostgreSqlFlowArgs";
import { UpdatePostgreSqlFlowArgs } from "./UpdatePostgreSqlFlowArgs";
import { DeletePostgreSqlFlowArgs } from "./DeletePostgreSqlFlowArgs";
import { PostgreSqlFlowService } from "../postgreSqlFlow.service";
@graphql.Resolver(() => PostgreSqlFlow)
export class PostgreSqlFlowResolverBase {
  constructor(protected readonly service: PostgreSqlFlowService) {}

  async _postgreSqlFlowsMeta(
    @graphql.Args() args: PostgreSqlFlowCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PostgreSqlFlow])
  async postgreSqlFlows(
    @graphql.Args() args: PostgreSqlFlowFindManyArgs
  ): Promise<PostgreSqlFlow[]> {
    return this.service.postgreSqlFlows(args);
  }

  @graphql.Query(() => PostgreSqlFlow, { nullable: true })
  async postgreSqlFlow(
    @graphql.Args() args: PostgreSqlFlowFindUniqueArgs
  ): Promise<PostgreSqlFlow | null> {
    const result = await this.service.postgreSqlFlow(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PostgreSqlFlow)
  async createPostgreSqlFlow(
    @graphql.Args() args: CreatePostgreSqlFlowArgs
  ): Promise<PostgreSqlFlow> {
    return await this.service.createPostgreSqlFlow({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PostgreSqlFlow)
  async updatePostgreSqlFlow(
    @graphql.Args() args: UpdatePostgreSqlFlowArgs
  ): Promise<PostgreSqlFlow | null> {
    try {
      return await this.service.updatePostgreSqlFlow({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PostgreSqlFlow)
  async deletePostgreSqlFlow(
    @graphql.Args() args: DeletePostgreSqlFlowArgs
  ): Promise<PostgreSqlFlow | null> {
    try {
      return await this.service.deletePostgreSqlFlow(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
