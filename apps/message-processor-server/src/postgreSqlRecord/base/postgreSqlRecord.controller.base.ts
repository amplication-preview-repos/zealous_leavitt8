/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PostgreSqlRecordService } from "../postgreSqlRecord.service";
import { PostgreSqlRecordCreateInput } from "./PostgreSqlRecordCreateInput";
import { PostgreSqlRecord } from "./PostgreSqlRecord";
import { PostgreSqlRecordFindManyArgs } from "./PostgreSqlRecordFindManyArgs";
import { PostgreSqlRecordWhereUniqueInput } from "./PostgreSqlRecordWhereUniqueInput";
import { PostgreSqlRecordUpdateInput } from "./PostgreSqlRecordUpdateInput";

export class PostgreSqlRecordControllerBase {
  constructor(protected readonly service: PostgreSqlRecordService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PostgreSqlRecord })
  async createPostgreSqlRecord(
    @common.Body() data: PostgreSqlRecordCreateInput
  ): Promise<PostgreSqlRecord> {
    return await this.service.createPostgreSqlRecord({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PostgreSqlRecord] })
  @ApiNestedQuery(PostgreSqlRecordFindManyArgs)
  async postgreSqlRecords(
    @common.Req() request: Request
  ): Promise<PostgreSqlRecord[]> {
    const args = plainToClass(PostgreSqlRecordFindManyArgs, request.query);
    return this.service.postgreSqlRecords({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PostgreSqlRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async postgreSqlRecord(
    @common.Param() params: PostgreSqlRecordWhereUniqueInput
  ): Promise<PostgreSqlRecord | null> {
    const result = await this.service.postgreSqlRecord({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PostgreSqlRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePostgreSqlRecord(
    @common.Param() params: PostgreSqlRecordWhereUniqueInput,
    @common.Body() data: PostgreSqlRecordUpdateInput
  ): Promise<PostgreSqlRecord | null> {
    try {
      return await this.service.updatePostgreSqlRecord({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PostgreSqlRecord })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePostgreSqlRecord(
    @common.Param() params: PostgreSqlRecordWhereUniqueInput
  ): Promise<PostgreSqlRecord | null> {
    try {
      return await this.service.deletePostgreSqlRecord({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
