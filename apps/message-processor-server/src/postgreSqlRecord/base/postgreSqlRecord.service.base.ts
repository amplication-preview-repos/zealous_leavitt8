/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PostgreSqlRecord as PrismaPostgreSqlRecord,
} from "@prisma/client";

export class PostgreSqlRecordServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PostgreSqlRecordCountArgs, "select">
  ): Promise<number> {
    return this.prisma.postgreSqlRecord.count(args);
  }

  async postgreSqlRecords(
    args: Prisma.PostgreSqlRecordFindManyArgs
  ): Promise<PrismaPostgreSqlRecord[]> {
    return this.prisma.postgreSqlRecord.findMany(args);
  }
  async postgreSqlRecord(
    args: Prisma.PostgreSqlRecordFindUniqueArgs
  ): Promise<PrismaPostgreSqlRecord | null> {
    return this.prisma.postgreSqlRecord.findUnique(args);
  }
  async createPostgreSqlRecord(
    args: Prisma.PostgreSqlRecordCreateArgs
  ): Promise<PrismaPostgreSqlRecord> {
    return this.prisma.postgreSqlRecord.create(args);
  }
  async updatePostgreSqlRecord(
    args: Prisma.PostgreSqlRecordUpdateArgs
  ): Promise<PrismaPostgreSqlRecord> {
    return this.prisma.postgreSqlRecord.update(args);
  }
  async deletePostgreSqlRecord(
    args: Prisma.PostgreSqlRecordDeleteArgs
  ): Promise<PrismaPostgreSqlRecord> {
    return this.prisma.postgreSqlRecord.delete(args);
  }
}
